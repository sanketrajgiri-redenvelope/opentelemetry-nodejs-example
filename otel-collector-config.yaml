receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  # hostmetrics:
  #   collection_interval: 60s
  #   scrapers:
  #     cpu: {}
  #     disk: {}
  #     load: {}
  #     filesystem: {}
  #     memory: {}
  #     network: {}
  #     paging: {}
  #     process:
  #       mute_process_name_error: true
  #       mute_process_exe_error: true
  #       mute_process_io_error: true
  #     processes: {}
  # prometheus:
  #   config:
  #     global:
  #       scrape_interval: 60s
  #     scrape_configs:
  #       - job_name: otel-collector-binary
  #         static_configs:
  #           - targets:
processors:
  batch:
    send_batch_size: 1000
    timeout: 10s
  resourcedetection:
    detectors: [env, system]
    timeout: 2s
    system:
      hostname_sources: [os]
  filter/drop_metrics:
        metrics:
          exclude:
            match_type: strict  # or 'regexp' for regex matching
            metric_names:
              - http.server.duration
              - http.client.duration
extensions:
  health_check: {}
  zpages: {}
connectors:
      datadog/connector:
exporters:
  debug:
    verbosity: detailed
  datadog:
    api:
      site: ap1.datadoghq.com
      key: ${env:DD_API_KEY}
  prometheus:
    endpoint: "0.0.0.0:8889" 
service:
  extensions: [health_check, zpages]
  pipelines:
    metrics:
      receivers: [otlp,datadog/connector]
      processors: [filter/drop_metrics,batch,resourcedetection]
      exporters: [datadog,prometheus]
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [datadog/connector,datadog]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [datadog]